
class NumOnly:
	"""

	3. Создайте собственный класс-исключение, который должен проверять содержимое списка
	на наличие только чисел. Проверить работу исключения на реальном примере. Запрашивать
	у пользователя данные и заполнять список необходимо только числами. Класс-исключение
	должен контролировать типы данных элементов списка.

	Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
	пока пользователь сам не остановит работу скрипта, введя, например, команду «stop».
	При этом скрипт завершается, сформированный список с числами выводится на экран.
	Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
	Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
	Вносить его в список, только если введено число. Класс-исключение должен не позволить
	пользователю ввести текст (не число) и отобразить соответствующее сообщение.
	При этом работа скрипта не должна завершаться.

	"""

	def __init__(self):
		self.list_items = []
		self.run = True

	def start(self):
		print('для завершения скрипта введите "stop"')
		while self.run:
			raw_input = input('введите число: ')
			if raw_input == 'stop':
				self.run = False
				print(list(self.list_items))
			else:
				try:
					if len(raw_input.split(',')) > 1 or len(raw_input.split('.')) > 1:
						self.list_items.append((float(raw_input.replace(',', '.'))))
					else:
						self.list_items.append((int(raw_input)))
				except:
					print(f'"{raw_input}" это не число!')

	def __str__(self):
		return f'{list(self.list_items)}'


if __name__ == '__main__':
	try:
		num_list = NumOnly()
		num_list.start()
		exit()
	except KeyboardInterrupt:
		print('\n\nВы нажали Cntl + C\nпроцесс завершен!\n')
		exit()
